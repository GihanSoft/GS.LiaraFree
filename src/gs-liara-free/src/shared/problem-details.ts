/**
 * Represents the contract for a problem details response, conforming to RFC 7807.
 *
 * This interface provides a standardized way for APIs to communicate errors,
 * making error handling on the client-side more consistent and predictable.
 *
 * It is designed to be extensible, allowing for additional members to be included
 * to provide more specific details about the problem.
 *
 * @see https://tools.ietf.org/html/rfc7807
 * @see https://tools.ietf.org/html/rfc9457 (obsoletes RFC 7807)
 */
export interface ProblemDetails {
  /**
   * A URI reference that identifies the problem type. This specification
   * encourages that, when dereferenced, it provide human-readable
   * documentation for the problem type. When this member is not present,
   * its value is assumed to be "about:blank".
   *
   * @type {string}
   * @see https://tools.ietf.org/html/rfc7807#section-3.1
   */
  type: string;

  /**
   * A short, human-readable summary of the problem type. It SHOULD NOT
   * change from occurrence to occurrence of the problem, except for purposes
   * of localization.
   *
   * @type {string}
   * @see https://tools.ietf.org/html/rfc7807#section-3.1
   */
  title: string;

  /**
   * The HTTP status code generated by the origin server for this
   * occurrence of the problem.
   *
   * @type {number}
   * @see https://tools.ietf.org/html/rfc7807#section-3.1
   */
  status: number;

  /**
   * A human-readable explanation specific to this occurrence of the problem.
   *
   * @type {string}
   * @see https://tools.ietf.org/html/rfc7807#section-3.1
   */
  detail?: string;

  /**
   * A URI reference that identifies the specific occurrence of the problem.
   * It may or may not yield further information if dereferenced.
   *
   * @type {string}
   * @see https://tools.ietf.org/html/rfc7807#section-3.1
   */
  instance?: string;

  /**
   * Extension members.
   *
   * While the core Problem Details specification defines the above properties,
   * APIs are free to add additional members to the object. This index signature
   * allows for type-safety when accessing these custom properties.
   *
   * For example, it can be used for validation errors:
   * "errors": {
   *   "email": ["The email address is already in use."],
   *   "password": ["The password must be at least 8 characters long."]
   * }
   *
   * @type {{ [key: string]: unknown; }}
   */
  [key: string]: unknown;
}

/**
 * Represents the contract for a validation problem details response,
 * extending the standard ProblemDetails (RFC 7807).
 *
 * This interface is commonly used by APIs to communicate validation
 * errors for form data or request bodies. It provides a structured
 * 'errors' object that maps model properties to their validation error messages.
 *
 * This structure is heavily inspired by the validation problem details
 * implementation in ASP.NET Core.
 *
 * @see https://tools.ietf.org/html/rfc7807
 */
export interface ValidationProblemDetails extends ProblemDetails {
  /**
   * A dictionary containing the validation errors.
   *
   * The keys of the object are the names of the fields that failed validation,
   * and the values are an array of error messages for that specific field.
   *
   * @example
   * {
   *   "email": ["The email address is required.", "The email address is not in a valid format."],
   *   "password": ["The password must be at least 8 characters long."]
   * }
   */
  errors: {
    [fieldName: string]: string[];
  };
}
